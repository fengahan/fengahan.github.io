<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 走狗</title>
    <link>https://fengahan.github.io/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 走狗</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Tue, 10 Aug 2021 20:44:58 +0648</lastBuildDate><atom:link href="https://fengahan.github.io/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何判断字符串ABCDE中是否 &#39;单独&#39; 存在BCD</title>
      <link>https://fengahan.github.io/technology/find-string-by-string-cut/</link>
      <pubDate>Tue, 10 Aug 2021 20:44:58 +0648</pubDate>
      
      <guid>https://fengahan.github.io/technology/find-string-by-string-cut/</guid>
      <description>需求:如何从ABCDE中判断是否存在BCD为单独存在
 分析
 存在:
 A BCD E AE BCD BCD AE BCD 空格+BCD  不存在:
 ABC DE ABCDE A BCED 更多。。。。  经上述分析可以得到 BCD 前后仅能同时存在一个空格或者无空格。这种需求最简单最直接最有效的方式就是正则匹配 它更容易让人理解。下面是同事写的正则匹配。
&amp;lt;? php $str=&amp;#34;ABCDE&amp;#34;; if(preg_match(&amp;#39;/^(BCD)$|^((BCD)\s+)|(\s+(BCD)\s+)|\s+(BCD)$/&amp;#39;,$str)){ echo &amp;#34;单独存在BCD&amp;#34; }else{ echo &amp;#34;XXXXXX&amp;#34;; } 如果仅仅满足业务以上代码足以,但是我没有用正则的习惯，所以当我遇到问题的时候对正则的方案也没有 多加考虑,便花了点时间写了个字符串处理版本,在看下面的代码的之前 我建议呢 先熟悉下php自带的几个 非常常用的函数 它们非常有用而且高效。请多了解了解它们，也比较建议了解各个函数的实现方法,你一定 大有收获。
 stripos stristr str_replace mb_strlen  上面的函数你可能用过一些,但是呢也可能你所用到的只是他们用法的一部分 比如str_replace 就有两种 用法。同时在手册上你查看某个函数 它还会推荐给你 一些相关或相似的函数，所以多看手册是一个php开发 的基本素养0_0
废话不多说 show me code
=======================
&amp;lt;?php function find($chars,$value) { $_chars=$chars;//字符串 的子串  $number=mb_strlen($chars);//字符串的总长度  $value_count=mb_strlen($value);//当前验证的字符长度  while (mb_strlen($_chars)&amp;gt;$value_count &amp;amp;&amp;amp; $number&amp;gt;0){ $number--;//避免特殊情况或者算法bug 造成无限循环  $pos=stripos($_chars,$value); if ($pos !</description>
    </item>
    
    <item>
      <title>PHP利用stack(栈)写了个简单都计算器</title>
      <link>https://fengahan.github.io/technology/php-todo-simplae-opernumber/</link>
      <pubDate>Fri, 14 Aug 2020 20:11:19 +0659</pubDate>
      
      <guid>https://fengahan.github.io/technology/php-todo-simplae-opernumber/</guid>
      <description>废话少说先上代码才是好汉,其核心部分为将人们平常用的中缀表达式(运算符在中间)转换为后缀表达式。计算的时候只需先
依次读出符号再读出该符号前两个数字即可,以下一个简单的示列:代码写的很丑 请务嘲笑😊
&amp;lt;?php /** * * php 实现基本的计算器 支持+ - * / 以及优先运算符() * 仅支持(个位数)不支持小数点和多位数 * 仅需要简单修改即可支持小数点和多位数(思路:scan中缀表达式的时候进行正则匹配数字)。 */ const OADD = 1; const OSUB = 1; const OMUL = 2; const ODIV = 2; $oper_stack = array(); $number_stack = array(); /** 转逆波兰表达式 */ $sym = &amp;#34;1+(2+3)*4-8/4+3*(2+1)&amp;#34;; $sym_len = mb_strlen($sym); for ($i = 0; $i &amp;lt; $sym_len; $i++) { $char = $sym[$i]; if (ctype_digit($char)) {//数字  array_push($number_stack, $char); } else {//操作符号  if ((empty($oper_stack) || $char == &amp;#34;(&amp;#34;) &amp;amp;&amp;amp; $char !</description>
    </item>
    
    <item>
      <title>简单的讲讲Redis分布式hash到底是啥情况</title>
      <link>https://fengahan.github.io/technology/what-redis-distributed-hash/</link>
      <pubDate>Mon, 25 Nov 2019 13:45:07 +0710</pubDate>
      
      <guid>https://fengahan.github.io/technology/what-redis-distributed-hash/</guid>
      <description>话说分布式一致性Hash可以理解为 放在什么圆环上。长篇大论的讲的我没兴趣看下去，其实最简单的一句话就是普通hash 是按照key值找server 而分布式hash 是按照key值所在的server(hash值)的范围找server。</description>
    </item>
    
    <item>
      <title>Twitter的分布式自增ID算法snowflake (PHP版)</title>
      <link>https://fengahan.github.io/technology/php-to-do-snowflow-autoid/</link>
      <pubDate>Sat, 26 Oct 2019 11:05:58 +0530</pubDate>
      
      <guid>https://fengahan.github.io/technology/php-to-do-snowflow-autoid/</guid>
      <description>！！！注意 ！注意！注意 重要的事情说三遍 在Php-fpm 的运行方式下并不安全 可以用在workman 和swoole 等常驻内存的应用程序上 &amp;lt;?php /** * Created by PhpStorm. * User: hanfeng * Date: 2018/8/24 * Time: 11:38 */ class Snow{ /** 开始时间截 (2015-01-01) */ private $twepoch = 1420041600000; private $workerIdBits = 5; private $dataCenterIdBits=5; private $maxWorkerId; private $maxDataCenterId ; private $sequenceBits =12; private $workerIdShift; private $dataCenterIdShift; private $timestampLeftShift; private $sequenceMask; private $workerId; private $dataCenterId; private $sequence=0; private $lastTimestamp = -1; public function __construct($workerId,$dataCenterId) { if ($workerId&amp;gt;$this-&amp;gt;maxWorkerId ||$workerId&amp;lt;0){ throw new \Exception(&amp;#34;workerId 有误&amp;#34;); } if ($dataCenterId&amp;gt;$this-&amp;gt;maxDataCenterId || $dataCenterId&amp;lt;0){ throw new \Exception(&amp;#34;dataCenterId 有误&amp;#34;); } $this-&amp;gt;workerId=$workerId; $this-&amp;gt;dataCenterId=$dataCenterId; $this-&amp;gt;maxWorkerId=-1 ^ (-1 &amp;lt;&amp;lt; $this-&amp;gt;workerIdBits); $this-&amp;gt;workerIdShift=$this-&amp;gt;sequenceBits; $this-&amp;gt;dataCenterIdShift=$this-&amp;gt;sequenceBits + $this-&amp;gt;workerIdBits; $this-&amp;gt;timestampLeftShift=$this-&amp;gt;dataCenterIdShift+$this-&amp;gt;dataCenterIdBits; $this-&amp;gt;sequenceMask=-1 ^ (-1 &amp;lt;&amp;lt; $this-&amp;gt;sequenceBits); } public function nextId() { $timestamp=$this-&amp;gt;getTimeMicro(); //如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常  if ($timestamp &amp;lt; $this-&amp;gt;lastTimestamp){ throw new \Exception(&amp;#34;时间有误。请重新调整系统时间&amp;#34;); } if ($this-&amp;gt;lastTimestamp == $timestamp) { $this-&amp;gt;sequence = ($this-&amp;gt;sequence + 1) &amp;amp; $this-&amp;gt;sequenceMask; //毫秒内序列溢出  if ($this-&amp;gt;sequence == 0) { //阻塞到下一个毫秒,获得新的时间戳  $timestamp= $this-&amp;gt;tilNextMillis($this-&amp;gt;lastTimestamp); } } //时间戳改变，毫秒内序列重置  else { $this-&amp;gt;sequence = 0; } //上次生成ID的时间截  $this-&amp;gt;lastTimestamp = $timestamp; //移位并通过或运算拼到一起组成64位的ID  return (($timestamp - $this-&amp;gt;twepoch) &amp;lt;&amp;lt; $this-&amp;gt;timestampLeftShift) //  | ($this-&amp;gt;dataCenterId &amp;lt;&amp;lt; $this-&amp;gt;dataCenterIdShift) //  | ($this-&amp;gt;workerId &amp;lt;&amp;lt; $this-&amp;gt;workerIdShift) //  | $this-&amp;gt;sequence; } public function tilNextMillis($stamp){ $timestamp = $this-&amp;gt;getTimeMicro(); while ($timestamp &amp;lt;= $stamp) { $timestamp = $this-&amp;gt;getTimeMicro(); } return $timestamp; } /** * 获取毫秒 */ public function getTimeMicro() { list($mic,$at)=explode(&amp;#34; &amp;#34;,microtime());//  return (float)sprintf(&amp;#39;%.</description>
    </item>
    
  </channel>
</rss>
